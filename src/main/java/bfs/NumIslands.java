package bfs;

import java.util.LinkedList;
import java.util.Queue;

/**
 * 岛屿个数
 */
public class NumIslands {
    public int numIslands(char[][] grid) {
        int count = 0;
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[i].length; j++){
                if(grid[i][j] == '1'){
                    bfs(grid,i,j);
                    count++;
                }
            }
        }
        return count;
    }

    private void bfs(char[][] grid, int i, int j){
        Queue<Integer> qi = new LinkedList<>();
        Queue<Integer> qj = new LinkedList<>();
        qi.offer(i);
        qj.offer(j);
        while(!qi.isEmpty()){
            int s = qi.size();
            for(int k = 0; k < s; k++){
                int curi = qi.poll();
                int curj = qj.poll();
                if(grid[curi][curj] != '0'){
                    grid[curi][curj] = '0';
                    //adj
                    int adip = curi + 1, adim = curi -1, adjp = curj + 1, adjm = curj -1;
                    if(adip < grid.length && grid[adip][curj] != '0') {qi.offer(adip); qj.offer(curj);}
                    if(adim >= 0 && grid[adim][curj] != '0') {qi.offer(adim); qj.offer(curj);}
                    if(adjp < grid[curi].length && grid[curi][adjp] != '0') {qi.offer(curi); qj.offer(adjp);}
                    if(adjm >= 0 && grid[curi][adjm] != '0') {qi.offer(curi); qj.offer(adjm);}
                }


            }


        }


    }

    public static void main(String[] args){
        char[][] ch = {{'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1'},{'0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'},{'1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'},{'0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'},{'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},{'1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}};
        System.out.println(new NumIslands().numIslands(ch));
    }
}
